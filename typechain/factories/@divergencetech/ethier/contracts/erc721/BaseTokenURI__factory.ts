/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BaseTokenURI,
  BaseTokenURIInterface,
} from "../../../../../@divergencetech/ethier/contracts/erc721/BaseTokenURI";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseTokenURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "baseTokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseTokenURI",
        type: "string",
      },
    ],
    name: "setBaseTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161083b38038061083b83398101604081905261002f916101bb565b61003833610047565b61004181610097565b506102c5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b805161010890600190602084019061010c565b5050565b8280546101189061028a565b90600052602060002090601f01602090048101928261013a5760008555610180565b82601f1061015357805160ff1916838001178555610180565b82800160010185558215610180579182015b82811115610180578251825591602001919060010190610165565b5061018c929150610190565b5090565b5b8082111561018c5760008155600101610191565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156101ce57600080fd5b82516001600160401b03808211156101e557600080fd5b818501915085601f8301126101f957600080fd5b81518181111561020b5761020b6101a5565b604051601f8201601f19908116603f01168101908382118183101715610233576102336101a5565b81604052828152888684870101111561024b57600080fd5b600093505b8284101561026d5784840186015181850187015292850192610250565b8284111561027e5760008684830101525b98975050505050505050565b600181811c9082168061029e57607f821691505b602082108114156102bf57634e487b7160e01b600052602260045260246000fd5b50919050565b610567806102d46000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806330176e131461005c578063715018a6146100715780638da5cb5b14610079578063d547cfb71461009e578063f2fde38b146100b3575b600080fd5b61006f61006a36600461038c565b6100c6565b005b61006f610115565b610081610150565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a661015f565b604051610095919061043c565b61006f6100c1366004610491565b6101ed565b336100cf610150565b6001600160a01b0316146100fe5760405162461bcd60e51b81526004016100f5906104c1565b60405180910390fd5b80516101119060019060208401906102dd565b5050565b3361011e610150565b6001600160a01b0316146101445760405162461bcd60e51b81526004016100f5906104c1565b61014e600061028d565b565b6000546001600160a01b031690565b6001805461016c906104f6565b80601f0160208091040260200160405190810160405280929190818152602001828054610198906104f6565b80156101e55780601f106101ba576101008083540402835291602001916101e5565b820191906000526020600020905b8154815290600101906020018083116101c857829003601f168201915b505050505081565b336101f6610150565b6001600160a01b03161461021c5760405162461bcd60e51b81526004016100f5906104c1565b6001600160a01b0381166102815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f5565b61028a8161028d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546102e9906104f6565b90600052602060002090601f01602090048101928261030b5760008555610351565b82601f1061032457805160ff1916838001178555610351565b82800160010185558215610351579182015b82811115610351578251825591602001919060010190610336565b5061035d929150610361565b5090565b5b8082111561035d5760008155600101610362565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561039e57600080fd5b81356001600160401b03808211156103b557600080fd5b818401915084601f8301126103c957600080fd5b8135818111156103db576103db610376565b604051601f8201601f19908116603f0116810190838211818310171561040357610403610376565b8160405282815287602084870101111561041c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156104695785810183015185820160400152820161044d565b8181111561047b576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156104a357600080fd5b81356001600160a01b03811681146104ba57600080fd5b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061050a57607f821691505b6020821081141561052b57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220fa31e463a130c5aadc744cd6ece544640fbd5a34ee57a1b26e82afb82feaab5c64736f6c63430008090033";

type BaseTokenURIConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BaseTokenURIConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BaseTokenURI__factory extends ContractFactory {
  constructor(...args: BaseTokenURIConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _baseTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BaseTokenURI> {
    return super.deploy(
      _baseTokenURI,
      overrides || {}
    ) as Promise<BaseTokenURI>;
  }
  override getDeployTransaction(
    _baseTokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_baseTokenURI, overrides || {});
  }
  override attach(address: string): BaseTokenURI {
    return super.attach(address) as BaseTokenURI;
  }
  override connect(signer: Signer): BaseTokenURI__factory {
    return super.connect(signer) as BaseTokenURI__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BaseTokenURIInterface {
    return new utils.Interface(_abi) as BaseTokenURIInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BaseTokenURI {
    return new Contract(address, _abi, signerOrProvider) as BaseTokenURI;
  }
}
