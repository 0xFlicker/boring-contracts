/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721A,
  ERC721AInterface,
} from "../../../erc721a/contracts/ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ApprovalCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "ApprovalToCurrentOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "ApproveToCaller",
    type: "error",
  },
  {
    inputs: [],
    name: "BalanceQueryForZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerQueryForNonexistentToken",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferCallerNotOwnerNorApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFromIncorrectOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToNonERC721ReceiverImplementer",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "URIQueryForNonexistentToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200125c3803806200125c8339810160408190526200003491620001df565b8151620000499060029060208501906200006c565b5080516200005f9060039060208401906200006c565b5050600080555062000286565b8280546200007a9062000249565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013a57600080fd5b81516001600160401b038082111562000157576200015762000112565b604051601f8301601f19908116603f0116810190828211818310171562000182576200018262000112565b816040528381526020925086838588010111156200019f57600080fd5b600091505b83821015620001c35785820183015181830184015290820190620001a4565b83821115620001d55760008385830101525b9695505050505050565b60008060408385031215620001f357600080fd5b82516001600160401b03808211156200020b57600080fd5b620002198683870162000128565b935060208501519150808211156200023057600080fd5b506200023f8582860162000128565b9150509250929050565b600181811c908216806200025e57607f821691505b602082108114156200028057634e487b7160e01b600052602260045260246000fd5b50919050565b610fc680620002966000396000f3fe608060405234801561001057600080fd5b50600436106100ba5760003560e01c806301ffc9a7146100bf57806306fdde03146100e7578063081812fc146100fc578063095ea7b31461012757806318160ddd1461013c57806323b872dd1461015257806342842e0e146101655780636352211e1461017857806370a082311461018b57806395d89b411461019e578063a22cb465146101a6578063b88d4fde146101b9578063c87b56dd146101cc578063e985e9c5146101df575b600080fd5b6100d26100cd366004610b7a565b61021b565b60405190151581526020015b60405180910390f35b6100ef61026d565b6040516100de9190610bef565b61010f61010a366004610c02565b6102ff565b6040516001600160a01b0390911681526020016100de565b61013a610135366004610c37565b610343565b005b600154600054035b6040519081526020016100de565b61013a610160366004610c61565b6103d1565b61013a610173366004610c61565b6103dc565b61010f610186366004610c02565b6103f7565b610144610199366004610c9d565b610409565b6100ef610457565b61013a6101b4366004610cb8565b610466565b61013a6101c7366004610d0a565b6104fc565b6100ef6101da366004610c02565b61054d565b6100d26101ed366004610de5565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061024c57506001600160e01b03198216635b5e139f60e01b145b8061026757506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606002805461027c90610e18565b80601f01602080910402602001604051908101604052809291908181526020018280546102a890610e18565b80156102f55780601f106102ca576101008083540402835291602001916102f5565b820191906000526020600020905b8154815290600101906020018083116102d857829003601f168201915b5050505050905090565b600061030a826105df565b610327576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061034e826103f7565b9050806001600160a01b0316836001600160a01b031614156103835760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b038216148015906103a357506103a181336101ed565b155b156103c1576040516367d9dca160e11b815260040160405180910390fd5b6103cc83838361060a565b505050565b6103cc838383610666565b6103cc838383604051806020016040528060008152506104fc565b600061040282610852565b5192915050565b60006001600160a01b038216610432576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b60606003805461027c90610e18565b6001600160a01b0382163314156104905760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610507848484610666565b6001600160a01b0383163b1515801561052957506105278484848461096c565b155b15610547576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610558826105df565b61057557604051630a14c4b560e41b815260040160405180910390fd5b600061058c60408051602081019091526000815290565b90508051600014156105ad57604051806020016040528060008152506105d8565b806105b784610a64565b6040516020016105c8929190610e53565b6040516020818303038152906040525b9392505050565b6000805482108015610267575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061067182610852565b9050836001600160a01b031681600001516001600160a01b0316146106a85760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806106c657506106c685336101ed565b806106e15750336106d6846102ff565b6001600160a01b0316145b90508061070157604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661072857604051633a954ecd60e21b815260040160405180910390fd5b6107346000848761060a565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102178355870180845292208054919390911661080757600054821461080757805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b60408051606081018252600080825260208201819052918101919091528160005481101561095357600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906109515780516001600160a01b0316156108e8579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff161515928101929092521561094c579392505050565b6108e8565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109a1903390899088908890600401610e82565b602060405180830381600087803b1580156109bb57600080fd5b505af19250505080156109eb575060408051601f3d908101601f191682019092526109e891810190610ebf565b60015b610a46573d808015610a19576040519150601f19603f3d011682016040523d82523d6000602084013e610a1e565b606091505b508051610a3e576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b606081610a885750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ab25780610a9c81610ef2565b9150610aab9050600a83610f23565b9150610a8c565b6000816001600160401b03811115610acc57610acc610cf4565b6040519080825280601f01601f191660200182016040528015610af6576020820181803683370190505b5090505b8415610a5c57610b0b600183610f37565b9150610b18600a86610f4e565b610b23906030610f62565b60f81b818381518110610b3857610b38610f7a565b60200101906001600160f81b031916908160001a905350610b5a600a86610f23565b9450610afa565b6001600160e01b031981168114610b7757600080fd5b50565b600060208284031215610b8c57600080fd5b81356105d881610b61565b60005b83811015610bb2578181015183820152602001610b9a565b838111156105475750506000910152565b60008151808452610bdb816020860160208601610b97565b601f01601f19169290920160200192915050565b6020815260006105d86020830184610bc3565b600060208284031215610c1457600080fd5b5035919050565b80356001600160a01b0381168114610c3257600080fd5b919050565b60008060408385031215610c4a57600080fd5b610c5383610c1b565b946020939093013593505050565b600080600060608486031215610c7657600080fd5b610c7f84610c1b565b9250610c8d60208501610c1b565b9150604084013590509250925092565b600060208284031215610caf57600080fd5b6105d882610c1b565b60008060408385031215610ccb57600080fd5b610cd483610c1b565b915060208301358015158114610ce957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215610d2057600080fd5b610d2985610c1b565b9350610d3760208601610c1b565b92506040850135915060608501356001600160401b0380821115610d5a57600080fd5b818701915087601f830112610d6e57600080fd5b813581811115610d8057610d80610cf4565b604051601f8201601f19908116603f01168101908382118183101715610da857610da8610cf4565b816040528281528a6020848701011115610dc157600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215610df857600080fd5b610e0183610c1b565b9150610e0f60208401610c1b565b90509250929050565b600181811c90821680610e2c57607f821691505b60208210811415610e4d57634e487b7160e01b600052602260045260246000fd5b50919050565b60008351610e65818460208801610b97565b835190830190610e79818360208801610b97565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610eb590830184610bc3565b9695505050505050565b600060208284031215610ed157600080fd5b81516105d881610b61565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f0657610f06610edc565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610f3257610f32610f0d565b500490565b600082821015610f4957610f49610edc565b500390565b600082610f5d57610f5d610f0d565b500690565b60008219821115610f7557610f75610edc565b500190565b634e487b7160e01b600052603260045260246000fdfea2646970667358221220b214da440ab7ed0a213d05920c17e70346e8195974e31dc80ecc4bc7943c322464736f6c63430008090033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC721A>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  override connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
