/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface StakingSimpleInterface extends utils.Interface {
  functions: {
    "ACCELERATED_YIELD_DAYS()": FunctionFragment;
    "ACCELERATED_YIELD_MULTIPLIER()": FunctionFragment;
    "SECONDS_IN_DAY()": FunctionFragment;
    "acceleratedYield()": FunctionFragment;
    "baseNFT()": FunctionFragment;
    "baseRate()": FunctionFragment;
    "deposit(bytes[],address,uint256[],uint256[])": FunctionFragment;
    "depositPaused()": FunctionFragment;
    "emergencyWithdraw(address,uint256[])": FunctionFragment;
    "getAccumulatedAmount(address)": FunctionFragment;
    "getCurrentReward(address)": FunctionFragment;
    "getStakerTokens(address)": FunctionFragment;
    "getStakerYield(address)": FunctionFragment;
    "getTokenYield(uint256)": FunctionFragment;
    "launchStaking()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(address,uint256)": FunctionFragment;
    "pauseDeposit(bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "signerAddress()": FunctionFragment;
    "stakingLaunched()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateBaseYield(uint256)": FunctionFragment;
    "updateSignerAddress(address)": FunctionFragment;
    "withdraw(address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACCELERATED_YIELD_DAYS"
      | "ACCELERATED_YIELD_MULTIPLIER"
      | "SECONDS_IN_DAY"
      | "acceleratedYield"
      | "baseNFT"
      | "baseRate"
      | "deposit"
      | "depositPaused"
      | "emergencyWithdraw"
      | "getAccumulatedAmount"
      | "getCurrentReward"
      | "getStakerTokens"
      | "getStakerYield"
      | "getTokenYield"
      | "launchStaking"
      | "onERC721Received"
      | "owner"
      | "ownerOf"
      | "pauseDeposit"
      | "renounceOwnership"
      | "signerAddress"
      | "stakingLaunched"
      | "transferOwnership"
      | "updateBaseYield"
      | "updateSignerAddress"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACCELERATED_YIELD_DAYS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACCELERATED_YIELD_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_IN_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceleratedYield",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseNFT", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike[], string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccumulatedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerYield",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "launchStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposit",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingLaunched",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBaseYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCELERATED_YIELD_DAYS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACCELERATED_YIELD_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_IN_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceleratedYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccumulatedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingLaunched",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBaseYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
    "WithdrawStuckERC721(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawStuckERC721"): EventFragment;
}

export interface DepositEventObject {
  staker: string;
  contractAddress: string;
  tokensAmount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WithdrawEventObject {
  staker: string;
  contractAddress: string;
  tokensAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawStuckERC721EventObject {
  receiver: string;
  tokenAddress: string;
  tokenId: BigNumber;
}
export type WithdrawStuckERC721Event = TypedEvent<
  [string, string, BigNumber],
  WithdrawStuckERC721EventObject
>;

export type WithdrawStuckERC721EventFilter =
  TypedEventFilter<WithdrawStuckERC721Event>;

export interface StakingSimple extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingSimpleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACCELERATED_YIELD_DAYS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ACCELERATED_YIELD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceleratedYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseNFT(overrides?: CallOverrides): Promise<[string]>;

    baseRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      signature: BytesLike[],
      contractAddress: string,
      tokenIds: BigNumberish[],
      rarityWeight: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositPaused(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyWithdraw(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAccumulatedAmount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentReward(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakerTokens(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getStakerYield(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenYield(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    launchStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pauseDeposit(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signerAddress(overrides?: CallOverrides): Promise<[string]>;

    stakingLaunched(overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBaseYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSignerAddress(
      _signerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      contractAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ACCELERATED_YIELD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

  ACCELERATED_YIELD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

  acceleratedYield(overrides?: CallOverrides): Promise<BigNumber>;

  baseNFT(overrides?: CallOverrides): Promise<string>;

  baseRate(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    signature: BytesLike[],
    contractAddress: string,
    tokenIds: BigNumberish[],
    rarityWeight: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositPaused(overrides?: CallOverrides): Promise<boolean>;

  emergencyWithdraw(
    tokenAddress: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAccumulatedAmount(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentReward(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakerTokens(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getStakerYield(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenYield(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  launchStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseDeposit(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signerAddress(overrides?: CallOverrides): Promise<string>;

  stakingLaunched(overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBaseYield(
    _yield: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSignerAddress(
    _signerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    contractAddress: string,
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACCELERATED_YIELD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    ACCELERATED_YIELD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceleratedYield(overrides?: CallOverrides): Promise<BigNumber>;

    baseNFT(overrides?: CallOverrides): Promise<string>;

    baseRate(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      signature: BytesLike[],
      contractAddress: string,
      tokenIds: BigNumberish[],
      rarityWeight: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositPaused(overrides?: CallOverrides): Promise<boolean>;

    emergencyWithdraw(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccumulatedAmount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentReward(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerTokens(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getStakerYield(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenYield(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchStaking(overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseDeposit(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    signerAddress(overrides?: CallOverrides): Promise<string>;

    stakingLaunched(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBaseYield(
      _yield: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSignerAddress(
      _signerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      contractAddress: string,
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,address,uint256)"(
      staker?: string | null,
      contractAddress?: null,
      tokensAmount?: null
    ): DepositEventFilter;
    Deposit(
      staker?: string | null,
      contractAddress?: null,
      tokensAmount?: null
    ): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,address,uint256)"(
      staker?: string | null,
      contractAddress?: null,
      tokensAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      staker?: string | null,
      contractAddress?: null,
      tokensAmount?: null
    ): WithdrawEventFilter;

    "WithdrawStuckERC721(address,address,uint256)"(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): WithdrawStuckERC721EventFilter;
    WithdrawStuckERC721(
      receiver?: string | null,
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null
    ): WithdrawStuckERC721EventFilter;
  };

  estimateGas: {
    ACCELERATED_YIELD_DAYS(overrides?: CallOverrides): Promise<BigNumber>;

    ACCELERATED_YIELD_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    acceleratedYield(overrides?: CallOverrides): Promise<BigNumber>;

    baseNFT(overrides?: CallOverrides): Promise<BigNumber>;

    baseRate(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      signature: BytesLike[],
      contractAddress: string,
      tokenIds: BigNumberish[],
      rarityWeight: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositPaused(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAccumulatedAmount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentReward(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerTokens(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerYield(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenYield(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseDeposit(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    stakingLaunched(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBaseYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSignerAddress(
      _signerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      contractAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCELERATED_YIELD_DAYS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ACCELERATED_YIELD_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SECONDS_IN_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceleratedYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      signature: BytesLike[],
      contractAddress: string,
      tokenIds: BigNumberish[],
      rarityWeight: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      tokenAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAccumulatedAmount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentReward(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerTokens(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerYield(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenYield(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseDeposit(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakingLaunched(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBaseYield(
      _yield: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSignerAddress(
      _signerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      contractAddress: string,
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
