/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface SOULInterface extends utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "MAX_TAX_VALUE()": FunctionFragment;
    "activeTaxCollectedAmount()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorise(address)": FunctionFragment;
    "authorisedLog(uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bribesDistributedToHolders()": FunctionFragment;
    "changestakingSourceContract(address)": FunctionFragment;
    "claimBaseTokenTax(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "depositBaseToken(address,uint256)": FunctionFragment;
    "depositBaseToken(uint256)": FunctionFragment;
    "depositBaseTokenMulti(address[],uint256[])": FunctionFragment;
    "depositedAmount(address)": FunctionFragment;
    "getMaxSupply()": FunctionFragment;
    "getUserBalance(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isDepositPaused()": FunctionFragment;
    "isPaused()": FunctionFragment;
    "isTransferPaused()": FunctionFragment;
    "isWithdrawPaused()": FunctionFragment;
    "mintBaseTokenFor(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseAllTransfers(bool)": FunctionFragment;
    "pauseDeposits(bool)": FunctionFragment;
    "pauseTransfers(bool)": FunctionFragment;
    "pauseWithdraw(bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescue()": FunctionFragment;
    "setTokenCap(uint256)": FunctionFragment;
    "spendBaseToken(address,uint256)": FunctionFragment;
    "spendTaxAmount()": FunctionFragment;
    "spendTaxCollectionStopped()": FunctionFragment;
    "spentAmount(address)": FunctionFragment;
    "stakingSource()": FunctionFragment;
    "stopTaxCollectionOnSpend(bool)": FunctionFragment;
    "stopTaxCollectionOnWithdraw(bool)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenCapSet()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferBaseToken(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unauthorise(address)": FunctionFragment;
    "updateSpendTaxAmount(uint256)": FunctionFragment;
    "updateWithdrawTaxAmount(uint256)": FunctionFragment;
    "withdrawBaseToken(uint256)": FunctionFragment;
    "withdrawTaxAmount()": FunctionFragment;
    "withdrawTaxCollectionStopped()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SUPPLY"
      | "MAX_TAX_VALUE"
      | "activeTaxCollectedAmount"
      | "allowance"
      | "approve"
      | "authorise"
      | "authorisedLog"
      | "balanceOf"
      | "bribesDistributedToHolders"
      | "changestakingSourceContract"
      | "claimBaseTokenTax"
      | "decimals"
      | "decreaseAllowance"
      | "depositBaseToken(address,uint256)"
      | "depositBaseToken(uint256)"
      | "depositBaseTokenMulti"
      | "depositedAmount"
      | "getMaxSupply"
      | "getUserBalance"
      | "increaseAllowance"
      | "isDepositPaused"
      | "isPaused"
      | "isTransferPaused"
      | "isWithdrawPaused"
      | "mintBaseTokenFor"
      | "name"
      | "owner"
      | "pauseAllTransfers"
      | "pauseDeposits"
      | "pauseTransfers"
      | "pauseWithdraw"
      | "renounceOwnership"
      | "rescue"
      | "setTokenCap"
      | "spendBaseToken"
      | "spendTaxAmount"
      | "spendTaxCollectionStopped"
      | "spentAmount"
      | "stakingSource"
      | "stopTaxCollectionOnSpend"
      | "stopTaxCollectionOnWithdraw"
      | "symbol"
      | "tokenCapSet"
      | "totalSupply"
      | "transfer"
      | "transferBaseToken"
      | "transferFrom"
      | "transferOwnership"
      | "unauthorise"
      | "updateSpendTaxAmount"
      | "updateWithdrawTaxAmount"
      | "withdrawBaseToken"
      | "withdrawTaxAmount"
      | "withdrawTaxCollectionStopped"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_TAX_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeTaxCollectedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "authorise", values: [string]): string;
  encodeFunctionData(
    functionFragment: "authorisedLog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bribesDistributedToHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changestakingSourceContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBaseTokenTax",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBaseToken(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBaseToken(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBaseTokenMulti",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransferPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintBaseTokenFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAllTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseTransfers",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseWithdraw",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTokenCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendBaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendTaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spendTaxCollectionStopped",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "spentAmount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopTaxCollectionOnSpend",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stopTaxCollectionOnWithdraw",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCapSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unauthorise", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateSpendTaxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawTaxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBaseToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTaxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTaxCollectionStopped",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TAX_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTaxCollectedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorisedLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bribesDistributedToHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changestakingSourceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBaseTokenTax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBaseToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBaseToken(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBaseTokenMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBaseTokenFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAllTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendTaxCollectionStopped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopTaxCollectionOnSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopTaxCollectionOnWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCapSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSpendTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTaxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTaxCollectionStopped",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ClaimTax(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "DepositFor(address,address,uint256)": EventFragment;
    "InternalTransfer(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Spend(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTax"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositFor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Spend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ClaimTaxEventObject {
  caller: string;
  userAddress: string;
  amount: BigNumber;
}
export type ClaimTaxEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimTaxEventObject
>;

export type ClaimTaxEventFilter = TypedEventFilter<ClaimTaxEvent>;

export interface DepositEventObject {
  userAddress: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DepositForEventObject {
  caller: string;
  userAddress: string;
  amount: BigNumber;
}
export type DepositForEvent = TypedEvent<
  [string, string, BigNumber],
  DepositForEventObject
>;

export type DepositForEventFilter = TypedEventFilter<DepositForEvent>;

export interface InternalTransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type InternalTransferEvent = TypedEvent<
  [string, string, BigNumber],
  InternalTransferEventObject
>;

export type InternalTransferEventFilter =
  TypedEventFilter<InternalTransferEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SpendEventObject {
  caller: string;
  userAddress: string;
  amount: BigNumber;
  tax: BigNumber;
}
export type SpendEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SpendEventObject
>;

export type SpendEventFilter = TypedEventFilter<SpendEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  userAddress: string;
  amount: BigNumber;
  tax: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface SOUL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SOULInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TAX_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeTaxCollectedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorise(
      addressToAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorisedLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bribesDistributedToHolders(overrides?: CallOverrides): Promise<[BigNumber]>;

    changestakingSourceContract(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBaseTokenTax(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositBaseToken(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositBaseToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBaseTokenMulti(
      user: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositedAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isDepositPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isTransferPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mintBaseTokenFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseAllTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseDeposits(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseWithdraw(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenCap(
      tokenCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spendBaseToken(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spendTaxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    spendTaxCollectionStopped(overrides?: CallOverrides): Promise<[boolean]>;

    spentAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingSource(overrides?: CallOverrides): Promise<[string]>;

    stopTaxCollectionOnSpend(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopTaxCollectionOnWithdraw(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenCapSet(overrides?: CallOverrides): Promise<[boolean]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBaseToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorise(
      addressToUnAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSpendTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBaseToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTaxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawTaxCollectionStopped(overrides?: CallOverrides): Promise<[boolean]>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  activeTaxCollectedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorise(
    addressToAuth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorisedLog(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bribesDistributedToHolders(overrides?: CallOverrides): Promise<BigNumber>;

  changestakingSourceContract(
    _source: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBaseTokenTax(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositBaseToken(address,uint256)"(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositBaseToken(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBaseTokenMulti(
    user: string[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositedAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getUserBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isDepositPaused(overrides?: CallOverrides): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isTransferPaused(overrides?: CallOverrides): Promise<boolean>;

  isWithdrawPaused(overrides?: CallOverrides): Promise<boolean>;

  mintBaseTokenFor(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseAllTransfers(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseDeposits(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseTransfers(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseWithdraw(
    _pause: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescue(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenCap(
    tokenCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spendBaseToken(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spendTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  spendTaxCollectionStopped(overrides?: CallOverrides): Promise<boolean>;

  spentAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakingSource(overrides?: CallOverrides): Promise<string>;

  stopTaxCollectionOnSpend(
    _stop: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopTaxCollectionOnWithdraw(
    _stop: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenCapSet(overrides?: CallOverrides): Promise<boolean>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBaseToken(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorise(
    addressToUnAuth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSpendTaxAmount(
    _taxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawTaxAmount(
    _taxAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBaseToken(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawTaxCollectionStopped(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    activeTaxCollectedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorise(addressToAuth: string, overrides?: CallOverrides): Promise<void>;

    authorisedLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bribesDistributedToHolders(overrides?: CallOverrides): Promise<BigNumber>;

    changestakingSourceContract(
      _source: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBaseTokenTax(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "depositBaseToken(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositBaseToken(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositBaseTokenMulti(
      user: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositedAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDepositPaused(overrides?: CallOverrides): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isTransferPaused(overrides?: CallOverrides): Promise<boolean>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<boolean>;

    mintBaseTokenFor(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseAllTransfers(
      _pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseDeposits(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    pauseTransfers(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    pauseWithdraw(_pause: boolean, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescue(overrides?: CallOverrides): Promise<void>;

    setTokenCap(
      tokenCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spendBaseToken(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    spendTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    spendTaxCollectionStopped(overrides?: CallOverrides): Promise<boolean>;

    spentAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingSource(overrides?: CallOverrides): Promise<string>;

    stopTaxCollectionOnSpend(
      _stop: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stopTaxCollectionOnWithdraw(
      _stop: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenCapSet(overrides?: CallOverrides): Promise<boolean>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferBaseToken(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorise(
      addressToUnAuth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSpendTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBaseToken(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTaxCollectionStopped(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "ClaimTax(address,address,uint256)"(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null
    ): ClaimTaxEventFilter;
    ClaimTax(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null
    ): ClaimTaxEventFilter;

    "Deposit(address,uint256)"(
      userAddress?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(userAddress?: string | null, amount?: null): DepositEventFilter;

    "DepositFor(address,address,uint256)"(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null
    ): DepositForEventFilter;
    DepositFor(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null
    ): DepositForEventFilter;

    "InternalTransfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): InternalTransferEventFilter;
    InternalTransfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): InternalTransferEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Spend(address,address,uint256,uint256)"(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null,
      tax?: null
    ): SpendEventFilter;
    Spend(
      caller?: string | null,
      userAddress?: string | null,
      amount?: null,
      tax?: null
    ): SpendEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Withdraw(address,uint256,uint256)"(
      userAddress?: string | null,
      amount?: null,
      tax?: null
    ): WithdrawEventFilter;
    Withdraw(
      userAddress?: string | null,
      amount?: null,
      tax?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    activeTaxCollectedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorise(
      addressToAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorisedLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bribesDistributedToHolders(overrides?: CallOverrides): Promise<BigNumber>;

    changestakingSourceContract(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBaseTokenTax(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositBaseToken(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositBaseToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBaseTokenMulti(
      user: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositedAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isDepositPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isTransferPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mintBaseTokenFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseAllTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseDeposits(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseWithdraw(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenCap(
      tokenCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spendBaseToken(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spendTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    spendTaxCollectionStopped(overrides?: CallOverrides): Promise<BigNumber>;

    spentAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingSource(overrides?: CallOverrides): Promise<BigNumber>;

    stopTaxCollectionOnSpend(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopTaxCollectionOnWithdraw(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenCapSet(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBaseToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorise(
      addressToUnAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSpendTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWithdrawTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBaseToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTaxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawTaxCollectionStopped(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeTaxCollectedAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorise(
      addressToAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorisedLog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bribesDistributedToHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changestakingSourceContract(
      _source: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBaseTokenTax(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositBaseToken(address,uint256)"(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositBaseToken(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBaseTokenMulti(
      user: string[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositedAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isDepositPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintBaseTokenFor(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseAllTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseDeposits(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseTransfers(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseWithdraw(
      _pause: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescue(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenCap(
      tokenCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spendBaseToken(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spendTaxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spendTaxCollectionStopped(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spentAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopTaxCollectionOnSpend(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopTaxCollectionOnWithdraw(
      _stop: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenCapSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBaseToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorise(
      addressToUnAuth: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSpendTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawTaxAmount(
      _taxAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBaseToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTaxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawTaxCollectionStopped(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
